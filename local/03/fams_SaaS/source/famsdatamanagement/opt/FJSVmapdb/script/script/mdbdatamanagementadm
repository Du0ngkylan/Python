#!/bin/bash
# Copyright(C) 2018 FUJITSU LIMITED All Rights Reserved.
# @file        mdbdatamanagementadm
# @brief       implement mdbdatamanagementadm  script
# @author      anhnguyen
# @date        2018/12/10

OPTION="${1}"                           # - $1 means parameter 1 in command line

# func: mdb_handle_signal_external
# brief: Handle other signals
mdb_handle_signal_external() {
    :
}

# func: mdb_handle_exit_external
# brief: Handle signal EXIT
mdb_handle_exit_external() {
    :
}
FAMS_BASE_PATH="/opt/FJSVmapdb/"
# Using utilities function
MAPDB_FUNCTIONS_FILE="${FAMS_BASE_PATH}"script/mapdb_functions
if [ -f ${MAPDB_FUNCTIONS_FILE} ]; then
    source "${MAPDB_FUNCTIONS_FILE}"
else
    echo -e "File not found: ${MAPDB_FUNCTIONS_FILE}" >&2
    exit 1
fi

# famsdtrcv executable path
FAMS_APIF_BIN="${FAMS_BASE_PATH}"daemon/famsdtrcv
# Data utilization executable path
FAMS_DATA_UTILIZATION_BIN="${FAMS_BASE_PATH}"daemon/famsdtul
# mdbapmanage executable path
FAMS_EVENT_PROCESSING_BIN="${FAMS_BASE_PATH}"daemon/famsevtps

FAMS_APIF_PID_PATH="${FJSVMAPDB_PIDDIR}/$(${CMD_BASENAME} ${FAMS_APIF_BIN}).pid"
FAMS_DATA_UTILIZATION_PID_PATH="${FJSVMAPDB_PIDDIR}/$(${CMD_BASENAME} ${FAMS_DATA_UTILIZATION_BIN}).pid"
FAMS_EVENT_PROCESSING_PID_PATH="${FJSVMAPDB_PIDDIR}/$(${CMD_BASENAME} ${FAMS_EVENT_PROCESSING_BIN}).pid"

# Enable trap exit
trap mdb_handle_exit EXIT
# Enable trap signal
trap mdb_handle_signal ${SIGNALS}
# Enable trap interrupt
trap '' SIGINT
# Set stack size
ulimit -s 512
ulimit -n 2048

# UID of user run script
FAMS_UID=$(${CMD_ID} -u)
if [ $? -ne 0 ]; then
    FAMS_UID=0
fi
# Signal for shutdown mdbreception, famsdtrcv
FAMS_SIGRT_SHUTDOWN=SIGRTMIN+1
# Maximum time for waiting process
FAMS_MAXWAIT_TIME=15
FAMS_DAEMON_STARTED="State: Started"
FAMS_DAEMON_STARTING="State: Starting"
FAMS_DAEMON_STOPPED="State: Stopped"
FAMS_DAEMON_STOPPING="State: Stopping"
FAMS_DAEMON_FAILED="State: FAILED"
FAMS_COM_VERSION=$(rpm -q --qf "%{VERSION}-%{RELEASE}" mdb-com)
if [ $? -eq 0 ]; then
    FAMS_COM_VERSION=${FAMS_COM_VERSION%.el*}
else
    FAMS_COM_VERSION=""
fi
FAMS_DMS_VERSION=$(rpm -q --qf "%{VERSION}-%{RELEASE}" mdb-dms)
if [ $? -eq 0 ]; then
    FAMS_DMS_VERSION=${FAMS_DMS_VERSION%.el*}
else
    FAMS_DMS_VERSION=""
fi

# Messages used in script
DUPLICATED_EXECUTION="実行したコマンドが二重起動です。"

FAMS_SERVER_HAS_BEEN_STARTED="養殖管理サーバは起動済みです。"
STARTING_FAMS_SERVER="養殖管理サーバを起動します... "
STARTED_FAMS_SERVER="養殖管理サーバを起動しました。"
START_FAMS_SERVER_FAILED="養殖管理サーバの起動に失敗しました。"

FAMS_SERVER_HAS_BEEN_STOPPED="養殖管理サーバは停止済みです。"
STOPPING_FAMS_SERVER="養殖管理サーバを停止します... "
STOPPED_FAMS_SERVER="養殖管理サーバを停止しました。"
STOP_FAMS_SERVER_FAILED="養殖管理サーバの停止に失敗しました。"

#function: get_version
#brief:
#   - get version of mdbdatamanagementadm
show_script_version() {
    # default
    local FAMS_VERSION="${FAMS_COM_VERSION}"
    
    local FAMS_COM_VERSION_ARRAY=(${FAMS_COM_VERSION//[\.|-]/ })
    local FAMS_DMS_VERSION_ARRAY=(${FAMS_DMS_VERSION//[\.|-]/ })
    for i in "${!FAMS_COM_VERSION_ARRAY[@]}"
    do
        if [ "${FAMS_DMS_VERSION_ARRAY[i]}" == "" ]; then
            break
        fi
        if [ "${FAMS_COM_VERSION_ARRAY[i]}" -ne "${FAMS_DMS_VERSION_ARRAY[i]}" ]; then
            if [ "${FAMS_COM_VERSION_ARRAY[i]}" -gt "${FAMS_DMS_VERSION_ARRAY[i]}" ]; then
                FAMS_VERSION=${FAMS_COM_VERSION}
            else
                FAMS_VERSION=${FAMS_DMS_VERSION}
            fi
            break
        fi
    done
    mdb_apllog_info "mdb-com: ${FAMS_COM_VERSION}, mdb-dms:${FAMS_DMS_VERSION}"
    echo -e "version : ${FAMS_VERSION}\n"
}

#function: start_daemon()
#brief:
#   - start famsdtrcv, or famsdtul
start_daemon() {
    # default
    local DAEMON_NAME=famsdtrcv
    local DAEMON_PID_PATH=${FAMS_APIF_PID_PATH}
    local DAEMON_BIN=${FAMS_APIF_BIN}
    if [ "$1" == "famsdtul" ]; then
        DAEMON_NAME=famsdtul
        DAEMON_PID_PATH=${FAMS_DATA_UTILIZATION_PID_PATH}
        DAEMON_BIN=${FAMS_DATA_UTILIZATION_BIN}
    fi
    if [ "$1" == "famsevtps" ]; then
        DAEMON_NAME=famsevtps
        DAEMON_PID_PATH=${FAMS_EVENT_PROCESSING_PID_PATH}
        DAEMON_BIN=${FAMS_EVENT_PROCESSING_BIN}
    fi
    mdb_apllog_info "Start ${DAEMON_NAME} service"
    local DAEMON_PID=$("${CMD_CAT}" "${DAEMON_PID_PATH}" 2>/dev/null)
    if [ "${DAEMON_PID}" != "" ]; then
        "${CMD_KILL}" -0 "${DAEMON_PID}" >/dev/null 2>&1
        if [ $? -eq 0 ]; then
            mdb_apllog_info "${DAEMON_NAME} is running"
            return "${RESULT_OK}"
        fi
    fi
    if [ ${FAMS_UID} -eq 0 ]; then
        # check error by check daemon still running
        (${CMD_RUNUSER} -l ${FJSVMAPDB_USER} -c "${DAEMON_BIN} >/dev/null 2>&1 & echo \$! > ${DAEMON_PID_PATH}")
    else
        # check error by check daemon still running
        (${DAEMON_BIN} >/dev/null 2>&1 & echo $! > ${DAEMON_PID_PATH})
    fi
    DAEMON_PID=$(${CMD_CAT} ${DAEMON_PID_PATH} 2>/dev/null)
    if [ "${DAEMON_PID}" != "" ]; then
        ${CMD_KILL} -0 ${DAEMON_PID} 2>/dev/null
        if [ $? -ne 0 ]; then
            mdb_apllog_critical "${DAEMON_NAME} started failed"
            return "${RESULT_NG}"
        fi
    else
        mdb_apllog_critical "${DAEMON_NAME} started failed"
        return "${RESULT_NG}"
    fi
    return "${RESULT_OK}"
}

#function: stop_daemon()
#brief:
#   - stop mdbreception, famsdtrcv
stop_daemon() {
    # default
    local DAEMON_NAME=famsdtrcv
    local DAEMON_PID_PATH=${FAMS_APIF_PID_PATH}
    local DAEMON_BIN=${FAMS_APIF_BIN}
    if [ "$1" == "famsdtul" ]; then
        DAEMON_NAME=famsdtul
        DAEMON_PID_PATH=${FAMS_DATA_UTILIZATION_PID_PATH}
        DAEMON_BIN=${FAMS_DATA_UTILIZATION_BIN}
    fi
    if [ "$1" == "famsevtps" ]; then
        DAEMON_NAME=famsevtps
        DAEMON_PID_PATH=${FAMS_EVENT_PROCESSING_PID_PATH}
        DAEMON_BIN=${FAMS_EVENT_PROCESSING_BIN}
    fi
    mdb_apllog_info "Stop ${DAEMON_NAME} service"
    local DAEMON_PID=$("${CMD_CAT}" "${DAEMON_PID_PATH}" 2>/dev/null)
    if [ "${DAEMON_PID}" != "" ]; then
        "${CMD_KILL}" -"${FAMS_SIGRT_SHUTDOWN}" "${DAEMON_PID}" >/dev/null 2>&1
        if [ $? -eq 0 ]; then
            local FAMS_COUNT=0
            # wait FAMS_MAXWAIT_TIME, in the case mdbreception hang, force stop by kill -9
            while [ ${FAMS_COUNT} -le ${FAMS_MAXWAIT_TIME} ]; do
                ${CMD_KILL} -0 ${DAEMON_PID} >/dev/null 2>&1
                if [ $? -ne 0 ]; then
                    mdb_apllog_info "${DAEMON_NAME} process stopped"
                    break
                fi
                FAMS_COUNT=$((FAMS_COUNT + 1))
                sleep 1
            done
            if [ ${FAMS_COUNT} -ge ${FAMS_MAXWAIT_TIME} ]; then
                # send SIGKILL
                mdb_apllog_info "${DAEMON_NAME} process stop by send SIGKILL: pid = ${DAEMON_PID}"
                "${CMD_KILL}" -SIGKILL "${DAEMON_PID}" >/dev/null 2>&1
            fi
        else
            mdb_apllog_info "${DAEMON_PID_PATH} is exists, but ${DAEMON_NAME} is not running"
        fi
    fi
    if [ "$2" == "--keep-pid" ]; then
        mdb_apllog_info "Stop ${DAEMON_NAME} service but do not delete pid file"
    else
        "${CMD_RM}" -f "${DAEMON_PID_PATH}" >/dev/null 2>&1
    fi
    return "${RESULT_OK}"
}

#function: get_status()
#brief:
#   - get status of famsdtrcv/famsdtul/famsevtps
get_status() {
    
    # default
    local DAEMON_NAME=famsdtrcv
    local DAEMON_PID_PATH=${FAMS_APIF_PID_PATH}
    local DAEMON_CONF_FILE="${FAMS_BASE_PATH}"etc/fams_receiver.conf
    if [ "$1" == "famsdtul" ]; then
        DAEMON_NAME=famsdtul
        DAEMON_PID_PATH=${FAMS_DATA_UTILIZATION_PID_PATH}
        DAEMON_BIN=${FAMS_DATA_UTILIZATION_BIN}
    fi
    if [ "$1" == "famsevtps" ]; then
        DAEMON_NAME=famsevtps
        DAEMON_PID_PATH=${FAMS_EVENT_PROCESSING_PID_PATH}
        DAEMON_BIN=${FAMS_EVENT_PROCESSING_BIN}
    fi
    # stopped: pid file is not exists
    if [ ! -f "${DAEMON_PID_PATH}" ]; then
        echo "${FAMS_DAEMON_STOPPED}"
        return
    fi
    local DAEMON_PID
    DAEMON_PID=$("${CMD_CAT}" "${DAEMON_PID_PATH}" 2>/dev/null)
    if [ $? -ne 0 ] || [ "${DAEMON_PID}" == "" ]; then
        echo "${FAMS_DAEMON_FAILED}"
        return
    fi
    # failed: pid file is exists, but process is not running
    "${CMD_KILL}" -0 "${DAEMON_PID}" >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "${FAMS_DAEMON_FAILED}"
        return
    fi
    # stopping: mdbdatamanagementadm  is running with stop
    # check $? so must seperate "local" and "$(...)"
    local DAEMON_PGREP
    DAEMON_PGREP=$("${CMD_PGREP}" -a "${FJSVMAPDB_SCRIPTNAME}" 2>/dev/null)
    if [ $? -eq 0 ]; then
        DAEMON_STATUS=$(echo "${DAEMON_PGREP}" | "${CMD_AWK}" '{printf $4}')
        if [ "${DAEMON_STATUS}" == "stop" ]; then
            echo "${FAMS_DAEMON_STOPPING}"
            return
        fi
    fi
    if [ "$DAEMON_NAME" == "famsevtps" ]; then
        # started: number threads of process > 4 (FJSVMAPDB_DAEMON_STARTED_THREADNUM)
        DAEMON_THREADNUM=$("${CMD_AWK}" '/Threads/ {print $2}' /proc/"${DAEMON_PID}"/status 2>/dev/null)
        if [ $? -ne 0 ]; then
            echo "${FAMS_DAEMON_FAILED}"
            return
        fi
        if [ "${DAEMON_THREADNUM}" -gt "${FJSVMAPDB_DAEMON_STARTED_THREADNUM}" ]; then
            echo "${FAMS_DAEMON_STARTED}"
            return
        fi
        # starting: default
        echo "${FAMS_DAEMON_STARTED}"
    else
      # check $? so must seperate "local" and "$(...)"
      local DAEMON_PORT
      DAEMON_PORT=$(${CMD_AWK} -F '=' '/^[ \t]*serverPort/{print $2}' ${DAEMON_CONF_FILE} 2>/dev/null)
      if [ $? -ne 0 ] || [ "${DAEMON_PORT}" == "" ]; then
          mdb_apllog_critical "Can not get information port from ${DAEMON_CONF_FILE}"
          echo "${FAMS_DAEMON_FAILED}"
          return
      else
          printf -v DAEMON_PORT "%x" "${DAEMON_PORT}"
      fi
      # check open port
      local DAEMON_NET_TCP=/proc/${DAEMON_PID}/net/tcp
      "${CMD_GREP}" -i "^[ \t]*[0-9]\+: [0-9a-f]\+:$DAEMON_PORT" "${DAEMON_NET_TCP}" >/dev/null 2>&1
      case $? in
          0)
              echo "${FAMS_DAEMON_STARTED}"
              return
          ;;
          1)
              echo "${FAMS_DAEMON_STARTING}"
              return
          ;;
          *)
              echo "${FAMS_DAEMON_FAILED}"
              mdb_apllog_critical "File not found ${DAEMON_NET_TCP}"
          ;;
      esac
    fi
}

#function: start()
#brief:
#   - start famsdtrcv/famsdtul/famsevtps
start() {
    # lock start/stop script
    mdb_cmd_lock -n >/dev/null 2>&1
    if [ $? -ne ${RESULT_OK} ]; then
        mdb_apllog_info "${DUPLICATED_EXECUTION}"
        echo "${DUPLICATED_EXECUTION}"
        exit ${RESULT_NG}
    fi
    
    local FAMSMANAGEADM_STATUS="$(status)"
    if [ "${FAMSMANAGEADM_STATUS}" == "${FAMS_DAEMON_STARTED}" ]; then
        mdb_apllog_info "${FAMS_SERVER_HAS_BEEN_STARTED}"
        echo "${FAMS_SERVER_HAS_BEEN_STARTED}"
        return "${RESULT_OK}"
    fi
    mdb_syslog -t "${FJSVMAPDB_SCRIPTNAME}" -i "F110101"
    
    local FAMS_BAR_ICON='#'
    show_script_version
    
    mdb_apllog_info "${STARTING_FAMS_SERVER}"
    echo "${STARTING_FAMS_SERVER}"
    echo -n ${FAMS_BAR_ICON}
    start_daemon famsdtrcv
    start_daemon famsdtul
    start_daemon famsevtps
    
    FAMSMANAGEADM_STATUS=$(status)
    while [ "${FAMSMANAGEADM_STATUS}" == "${FAMS_DAEMON_STARTING}" ]; do
        echo -n ${FAMS_BAR_ICON}
        sleep 1
        FAMSMANAGEADM_STATUS=$(status)
    done
    echo
    if [ "${FAMSMANAGEADM_STATUS}" == "${FAMS_DAEMON_STARTED}" ]; then
        mdb_apllog_info "${STARTED_FAMS_SERVER}"
        echo "${STARTED_FAMS_SERVER}"
        mdb_syslog -t "${FJSVMAPDB_SCRIPTNAME}" -i "F110102"
    else
        mdb_apllog_critical "${START_FAMS_SERVER_FAILED}"
        echo "${START_FAMS_SERVER_FAILED}"
        stop_daemon famsdtrcv --keep-pid
        stop_daemon famsdtul --keep-pid
        stop_daemon famsevtps --keep-pid
        mdb_syslog -t "${FJSVMAPDB_SCRIPTNAME}" -i "F110103"
        exit "${RESULT_NG}"
    fi
    return ${RESULT_OK}
}

#function: stop ()
#brief:
#   - stop famsdtrcv/famsdtul/famsevtps
stop() {
    # lock start/stop script
    mdb_cmd_lock -n > /dev/null 2>&1
    if [ $? -ne "${RESULT_OK}" ]; then
        mdb_apllog_info "${DUPLICATED_EXECUTION}" 2>/dev/null
        echo "${DUPLICATED_EXECUTION}"
        exit "${RESULT_NG}"
    fi
    
    if [ "${FAMSMANAGEADM_STATUS}" == "${FAMS_DAEMON_STOPPED}" ]; then
        mdb_apllog_info "${FAMS_SERVER_HAS_BEEN_STOPPED}"
        echo "${FAMS_SERVER_HAS_BEEN_STOPPED}"
        return "${RESULT_OK}"
    fi
    
    show_script_version
    mdb_apllog_info "${STOPPING_FAMS_SERVER}"
    echo "${STOPPING_FAMS_SERVER}"
    mdb_syslog -t "${FJSVMAPDB_SCRIPTNAME}" -i "F110104"
    
    local FAMS_BAR_ICON='#'
    echo -n ${FAMS_BAR_ICON}
    
    stop_daemon famsdtul
    stop_daemon famsdtrcv
    stop_daemon famsevtps
    
    local FAMSMANAGEADM_STATUS="$(status)"
    while [ "${FAMSMANAGEADM_STATUS}" == "${FAMS_DAEMON_STOPPING}" ]; do
        echo -n ${FAMS_BAR_ICON}
        sleep 1
        FAMSMANAGEADM_STATUS=$(status)
    done
    echo
    if [ "${FAMSMANAGEADM_STATUS}" == "${FAMS_DAEMON_STOPPED}" ]; then
        mdb_apllog_info "${STOPPED_FAMS_SERVER}"
        echo "${STOPPED_FAMS_SERVER}"
        mdb_syslog -t "${FJSVMAPDB_SCRIPTNAME}" -i "F110105"
    else
        mdb_apllog_critical "${STOP_FAMS_SERVER_FAILED}"
        echo "${STOP_FAMS_SERVER_FAILED}"
        mdb_syslog -t "${FJSVMAPDB_SCRIPTNAME}" -i "F110106"
        exit "${RESULT_NG}"
    fi
    
    return "${RESULT_OK}"
}

#function: version ()
#brief:
#   - show version famsdtrcv/famsdtul/famsevtps
version() {
    if [ "${FAMS_COM_VERSION}" = "" ] || [ "${FAMS_DMS_VERSION}" == "" ] ; then
        echo -e "${VERSION_FAILED}"
    else
        show_script_version
        echo -e "mdb-com       : ${FAMS_COM_VERSION}"
        echo -e "mdb-dms       : ${FAMS_DMS_VERSION}"
    fi
    return "${RESULT_OK}"
}

#function: help ()
#brief:
#   - show help mdbdatamanagementadm
help() {
    local SPACE2="  "
    show_script_version
    
    echo -e "使用方法: mdbdatamanagementadm  <サブコマンド>""\n"
    echo -e "利用可能なサブコマンド:"
    echo -e "${SPACE2}""help: ヘルプを表示します。"
    echo -e "${SPACE2}${SPACE2}""使用方法: mdbdatamanagementadm  help""\n"
    echo -e "${SPACE2}""status: サーバの状態を表示します。"
    echo -e "${SPACE2}${SPACE2}""使用方法: mdbdatamanagementadm  status""\n"
    echo -e "${SPACE2}""start: サーバを起動します。"
    echo -e "${SPACE2}${SPACE2}""使用方法: mdbdatamanagementadm  start""\n"
    echo -e "${SPACE2}""stop: サーバを停止します。"
    echo -e "${SPACE2}${SPACE2}""使用方法: mdbdatamanagementadm  stop""\n"
    echo -e "${SPACE2}""version: サーバのバージョンを表示します。"
    echo -e "${SPACE2}${SPACE2}""使用方法: mdbdatamanagementadm  version"
    
    return "${RESULT_OK}"
}

#function: status()
#brief:
#   - show status of mdbdatamanagementadm
status() {
    
    local DAEMON_STATUS_APIF="$(get_status famsdtrcv)"
    local DAEMON_STATUS_DATA_UTIL="$(get_status famsdtul)"
    local DAEMON_STATUS_EVENT_PROCESSING="$(get_status famsevtps)"
    
    if [ "${DAEMON_STATUS_APIF}" == "${FAMS_DAEMON_STOPPING}" ] || [ "${DAEMON_STATUS_DATA_UTIL}" == "${FAMS_DAEMON_STOPPING}" ] || [ "${DAEMON_STATUS_EVENT_PROCESSING}" == "${FAMS_DAEMON_STOPPING}" ]; then
        echo -e "${FAMS_DAEMON_STOPPING}"
        return "${RESULT_OK}"
    fi
    
    if [ "${DAEMON_STATUS_APIF}" == "${FAMS_DAEMON_STARTING}" ] || [ "${DAEMON_STATUS_DATA_UTIL}" == "${FAMS_DAEMON_STARTING}" ] || [ "${DAEMON_STATUS_EVENT_PROCESSING}" == "${FAMS_DAEMON_STARTING}" ]; then
        echo -e "${FAMS_DAEMON_STARTING}"
        return "${RESULT_OK}"
    fi
    
    if [ "${DAEMON_STATUS_APIF}" == "${FAMS_DAEMON_STARTED}" ] || [ "${DAEMON_STATUS_DATA_UTIL}" == "${FAMS_DAEMON_STARTED}" ] || [ "${DAEMON_STATUS_EVENT_PROCESSING}" == "${FAMS_DAEMON_STARTED}" ]; then
        echo -e "${FAMS_DAEMON_STARTED}"
        return "${RESULT_OK}"
    fi
    
    if [ "${DAEMON_STATUS_APIF}" == "${FAMS_DAEMON_FAILED}" ] || [ "${DAEMON_STATUS_DATA_UTIL}" == "${FAMS_DAEMON_FAILED}" ] || [ "${DAEMON_STATUS_EVENT_PROCESSING}" == "${FAMS_DAEMON_FAILED}" ]; then
        echo -e "${FAMS_DAEMON_FAILED}"
        return "${RESULT_OK}"
    fi
    
    echo -e "${FAMS_DAEMON_STOPPED}"
    return "${RESULT_OK}"
}

######################################################################
####                          main flow                           ####
######################################################################

# mdb_apllog_info "Execute with option: ${OPTION}"

case ${OPTION} in
    start)
        start
    ;;
    stop)
        stop
    ;;
    version)
        version
    ;;
    help)
        help
    ;;
    status)
        mdb_apllog_info "$(status)"
        echo "$(status)"
    ;;
    *)
        mdb_apllog_info "Wrong usage: $0 (start|stop|version|help|status)"
        help
        exit "${RESULT_NG}"
    ;;
esac
exit ${RESULT_OK}

######################################################################
